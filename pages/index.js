import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import Swal from "sweetalert2";
import axios from "axios";
import { useState } from "react";

import "bootstrap/dist/css/bootstrap.css";

import {
  UncontrolledDropdown,
  DropdownToggle,
  DropdownMenu,
  DropdownItem,
} from "reactstrap";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTrash,
  faPen,
  faMagnifyingGlass,
} from "@fortawesome/free-solid-svg-icons";

import dateFormat, { masks } from "dateformat";
masks.Time = "d mmmm yyyy";

import "react-responsive-modal/styles.css";
import { Modal } from "react-responsive-modal";

import Skeleton, { SkeletonTheme } from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";

export default function Home(props) {
  const [blog, setBlog] = useState(props.blog || null);
  const [cariKonten, setCariKonten] = useState("");
  const [cari, setCari] = useState("");
  const [tipeSort, setTipeSort] = useState("terbaru");

  const [modalLoading, setModalLoading] = useState(false);

  const KonfirmHapus = (Id, index) => {
    console.log("KonfirmHapus");
    Swal.fire({
      title: "Apakah anda yakin ?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Hapus",
      confirmButtonColor: "#ff0055",
      cancelButtonColor: "#999999",
      cancelButtonText: "Batal",
      reverseButtons: true,
      focusConfirm: false,
      focusCancel: true,
    }).then((res) => {
      if (res.value) {
        console.log(res.value);
        hapusDataBlog(Id);
      }
    });
  };

  function hapusDataBlog(Id) {
    console.log("submit");
    setModalLoading(true);

    var formData = new FormData();
    formData.append("Id", Id);

    axios
      .post(`${process.env.NEXT_PUBLIC_API}/hapusdatablog`, formData)
      .then((res) => {
        console.log(res);
        if (res.data.Error == 0) {
          modalNotif("success", res.data.Message, "");
          setBlog((blog) => blog.filter((filter) => filter.Id != Id));
        } else {
          modalNotif("error", res.data.Message, "");
        }
        setModalLoading(false);
      })
      .catch((err) => {
        console.log(err);
        modalNotif("eror", "Terjadi kesalahan pada sistem", "");
      });
  }

  const modalNotif = (type, title, text) => {
    Swal.fire({
      icon: type,
      title: title,
      text: text,
      timer: 1000,
      showConfirmButton: false,
    }).then(() => {});
  };

  const sortData = (a, b) => {
    console.log("sortData");
    if (tipeSort == "terbaru") {
      console.log("terbaru");
      return new Date(b.CreatedAt) - new Date(a.CreatedAt);
    }
    if (tipeSort == "terlama") {
      console.log("terlama");
      return new Date(a.CreatedAt) - new Date(b.CreatedAt);
    }
    if (tipeSort == "az") {
      return a.Judul.localeCompare(b.Judul);
    }
    if (tipeSort == "za") {
      return b.Judul.localeCompare(a.Judul);
    }
  };

  function cekNullData() {
    if (blog == []) {
      return true;
    } else {
      if (
        blog.filter((filter) =>
          cariKonten == ""
            ? true
            : filter.Judul.includes(cariKonten.toLowerCase())
        ).length > 0
      ) {
        return false;
      } else {
        return true;
      }
    }
  }

  function loadImageCS(index){
    let newBlog = [...blog];
    newBlog[index]['loadImage'] = 1;
    setBlog(newBlog);
  }

  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>BLOG | NEXT JS</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <div className={styles.divTambah}>
            <div className={styles.title}>BLOG</div>
            <div>
              <div className={styles.divSettingData2}>
                <UncontrolledDropdown>
                  <DropdownToggle className={styles.dropSort}>
                    Urutkan
                  </DropdownToggle>
                  <DropdownMenu className={styles.dropSortMenu}>
                    <DropdownItem
                      onClick={() => setTipeSort("terbaru")}
                      className={styles.dropSortItem}
                    >
                      Terbaru
                    </DropdownItem>
                    <DropdownItem
                      onClick={() => setTipeSort("terlama")}
                      className={styles.dropSortItem}
                    >
                      Terlama
                    </DropdownItem>
                    <DropdownItem
                      onClick={() => setTipeSort("az")}
                      className={styles.dropSortItem}
                    >
                      A-Z
                    </DropdownItem>
                    <DropdownItem
                      onClick={() => setTipeSort("za")}
                      className={styles.dropSortItem}
                    >
                      Z-A
                    </DropdownItem>
                  </DropdownMenu>
                </UncontrolledDropdown>
                <Link href="/tambah">
                  <button className={styles.btnTambah}>Tambah</button>
                </Link>
              </div>

              <div className={styles.divSettingData}>
                <input
                  className={styles.divInputCari}
                  type="text"
                  placeholder="Masukan judul ..."
                  maxLength={200}
                  onChange={(e) => setCari(e.target.value)}
                  required
                />
                <FontAwesomeIcon
                  icon={faMagnifyingGlass}
                  onClick={(e) => setCariKonten(cari)}
                  className={styles.divIconSearch}
                />
              </div>
            </div>
          </div>
          <div className={styles.divContainer}>
            {cekNullData()
              ? "Data Kosong / Tidak Ditemukan"
              : blog
                  .filter((filter) =>
                    cariKonten == ""
                      ? true
                      : filter.Judul.includes(cariKonten.toLowerCase())
                  )
                  .sort((a, b) => sortData(a, b))
                  .map((data, index) => (
                    <div key={index} className={styles.divContent}>
                      <div className={styles.imgContainer}>
                        {data.loadImage == 0 ? (
                          <div className={styles.loadContainer}>
                          {/* <div className="loader"></div> */}
                          <Skeleton width={"250px"} height={"130px"} count={1} />
                          </div>
                        ) : (
                          <Image
                            className={styles.imgContent}
                            layout="fill"
                            src={data.Foto}
                          />
                        )}
                        <Image
                          className={styles.imgContent2}
                          layout="fill"
                          src={data.Foto}
                          onLoad={() => {
                            console.log(`${data.Foto} is loaded`);
                            loadImageCS(index);
                          }}
                        />
                      </div>
                      <div className={styles.divDesc}>
                        <div className={styles.divJudul}>{data.Judul}</div>
                        <div className={styles.divInfo}>
                          <div className={styles.divTime}>
                            {dateFormat(data.CreatedAt, "Time")}
                          </div>
                          <div className={styles.divContainIcon}>
                            <Link href={`/ubah/${data.Id}`}>
                              <FontAwesomeIcon
                                icon={faPen}
                                className={styles.divIcon}
                              />
                            </Link>
                            <FontAwesomeIcon
                              icon={faTrash}
                              onClick={() => KonfirmHapus(data.Id)}
                              className={styles.divIcon}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
          </div>
        </main>
      </div>

      <Modal
        open={modalLoading}
        center
        blockScroll={false}
        showCloseIcon={false}
        closeOnOverlayClick={false}
        classNames={{
          overlay: "customOverlay",
          modal: "modalLoader",
        }}
      >
        <div className="loader"></div>
      </Modal>
    </>
  );
}

export async function getServerSideProps(context) {
  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API}/getdatablog`);
    const data = await res.json();
    if ((await data.Error) == 0) {
      const blog = await data.getDataBlog;
      return {
        props: { blog },
      };
    } else {
      const blog = [];
      return {
        props: { blog },
      };
    }
  } catch (err) {
    return { props: { blog: [] } };
  }
}
